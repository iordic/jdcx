package gui;

import java.io.UnsupportedEncodingException;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;
import jssc.SerialPortList;
import model.Command;
import model.DCDevice;
import static serial.SerialHandler.BAUDRATE;
import static serial.SerialHandler.DATABITS;
import static serial.SerialHandler.PARITY;
import static serial.SerialHandler.STOP_BITS;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author usuario
 */
public class MainPanel extends javax.swing.JPanel implements SerialPortEventListener {
    SerialPort serialPort;
    DCDevice device;
    boolean connected;
    
    // Constants serial
    public static final int BAUDRATE = 115200;
	public static final int DATABITS = 8;
	public static final int STOP_BITS = 1;
	public static final int PARITY = 0; // None
    public static final String ENCODING = "gb2312";
    /**
     * Creates new form ValuesPanel
     */
    public MainPanel() {
        initComponents();
        connected = false;
        String [] portNames = SerialPortList.getPortNames();
        if (portNames.length > 0) {
            this.portComboBox.removeAllItems();
            for (String portName: portNames) {
              this.portComboBox.addItem(portName);  
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        mainPanel = new javax.swing.JPanel();
        portLabel = new javax.swing.JLabel();
        portComboBox = new javax.swing.JComboBox<>();
        connectButton = new javax.swing.JButton();
        connectionStatusLabel = new javax.swing.JLabel();
        currentValuesPanel = new javax.swing.JPanel();
        currentVoltageLabel = new javax.swing.JLabel();
        currentCurrentLabel = new javax.swing.JLabel();
        currentPowerLabel = new javax.swing.JLabel();
        currentTemperatureLabel = new javax.swing.JLabel();
        currentStateButton = new javax.swing.JButton();
        shortcutsPanel = new javax.swing.JPanel();
        m1Button = new javax.swing.JButton();
        m2Button = new javax.swing.JButton();
        setOutputPanel = new javax.swing.JPanel();
        setVoltageFormatted = new javax.swing.JFormattedTextField();
        setVoltageLabel = new javax.swing.JLabel();
        setCurrentFormatted = new javax.swing.JFormattedTextField();
        setCurrentLabel = new javax.swing.JLabel();
        applyOutputButton = new javax.swing.JButton();
        cvCcLabel = new javax.swing.JLabel();
        onOffToggleButton = new javax.swing.JToggleButton();
        ProtectionSettingsPanel = new javax.swing.JPanel();
        vProtectionFormatted = new javax.swing.JFormattedTextField();
        vProtectionLabel = new javax.swing.JLabel();
        cProtectionFormatted = new javax.swing.JFormattedTextField();
        cProtectionLabel = new javax.swing.JLabel();
        pProtectionFormatted = new javax.swing.JFormattedTextField();
        pProtectionLabel = new javax.swing.JLabel();
        tProtectionCheckBox = new javax.swing.JCheckBox();
        tProtectionFormatted = new javax.swing.JFormattedTextField();
        applyProtectionButton = new javax.swing.JButton();
        setDefaultProtectionButton = new javax.swing.JButton();
        refreshProtectionButton = new javax.swing.JButton();
        logPanel = new javax.swing.JPanel();
        logScrollPane = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        firmwarePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        fileSelectionLabel = new javax.swing.JLabel();
        fileSelectionTextField = new javax.swing.JTextField();
        openFileButton = new javax.swing.JButton();
        upgradeFirmwareButton = new javax.swing.JButton();
        downloadFirmwareLabel = new javax.swing.JLabel();
        packetLengthLabel = new javax.swing.JLabel();
        packetLengthComboBox = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        aboutPane = new javax.swing.JEditorPane();

        mainPanel.setPreferredSize(new java.awt.Dimension(400, 400));

        portLabel.setText("Port:");

        portComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No port selected" }));

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        connectionStatusLabel.setText("Not connected.");

        currentValuesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Values"));

        currentVoltageLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        currentVoltageLabel.setText("00.00 V");

        currentCurrentLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        currentCurrentLabel.setText("0.000 A");

        currentPowerLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        currentPowerLabel.setText("000.0 W");
        currentPowerLabel.setName(""); // NOI18N

        currentTemperatureLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        currentTemperatureLabel.setText("000 ÂºC");

        currentStateButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        currentStateButton.setText("OK");
        currentStateButton.setToolTipText("");
        currentStateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentStateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout currentValuesPanelLayout = new javax.swing.GroupLayout(currentValuesPanel);
        currentValuesPanel.setLayout(currentValuesPanelLayout);
        currentValuesPanelLayout.setHorizontalGroup(
            currentValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currentValuesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(currentValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(currentPowerLabel)
                    .addGroup(currentValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(currentVoltageLabel)
                        .addComponent(currentCurrentLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(currentValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(currentTemperatureLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(currentStateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        currentValuesPanelLayout.setVerticalGroup(
            currentValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, currentValuesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(currentValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentVoltageLabel)
                    .addComponent(currentTemperatureLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(currentValuesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(currentValuesPanelLayout.createSequentialGroup()
                        .addComponent(currentCurrentLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(currentPowerLabel))
                    .addComponent(currentStateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        shortcutsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Shortcuts"));

        m1Button.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        m1Button.setText("M1");
        m1Button.setMaximumSize(new java.awt.Dimension(56, 56));
        m1Button.setMinimumSize(new java.awt.Dimension(56, 56));

        m2Button.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        m2Button.setText("M2");
        m2Button.setMaximumSize(new java.awt.Dimension(56, 56));
        m2Button.setMinimumSize(new java.awt.Dimension(56, 56));

        javax.swing.GroupLayout shortcutsPanelLayout = new javax.swing.GroupLayout(shortcutsPanel);
        shortcutsPanel.setLayout(shortcutsPanelLayout);
        shortcutsPanelLayout.setHorizontalGroup(
            shortcutsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shortcutsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(m1Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(m2Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        shortcutsPanelLayout.setVerticalGroup(
            shortcutsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shortcutsPanelLayout.createSequentialGroup()
                .addGroup(shortcutsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(m1Button, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m2Button, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setOutputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Set output"));

        setVoltageFormatted.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#00.00"))));
        setVoltageFormatted.setText("00,00");
        setVoltageFormatted.setToolTipText("");
        setVoltageFormatted.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        setVoltageFormatted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setVoltageFormattedActionPerformed(evt);
            }
        });

        setVoltageLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        setVoltageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        setVoltageLabel.setText("V");

        setCurrentFormatted.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        setCurrentFormatted.setText("0,000");
        setCurrentFormatted.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        setCurrentFormatted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setCurrentFormattedActionPerformed(evt);
            }
        });

        setCurrentLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        setCurrentLabel.setText("A");

        applyOutputButton.setText("Apply");
        applyOutputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyOutputButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout setOutputPanelLayout = new javax.swing.GroupLayout(setOutputPanel);
        setOutputPanel.setLayout(setOutputPanelLayout);
        setOutputPanelLayout.setHorizontalGroup(
            setOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setOutputPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(setVoltageFormatted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setVoltageLabel)
                .addGap(57, 57, 57)
                .addComponent(setCurrentFormatted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setCurrentLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(applyOutputButton)
                .addContainerGap())
        );
        setOutputPanelLayout.setVerticalGroup(
            setOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setOutputPanelLayout.createSequentialGroup()
                .addGroup(setOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(applyOutputButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, setOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(setVoltageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(setCurrentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(setCurrentFormatted, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(setVoltageFormatted, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cvCcLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cvCcLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cvCcLabel.setText("CV");

        onOffToggleButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        onOffToggleButton.setText("OFF");
        onOffToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onOffToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(currentValuesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(shortcutsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cvCcLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(onOffToggleButton)
                                .addGap(17, 17, 17))))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(portLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(connectionStatusLabel)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(portComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(connectButton)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(setOutputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(37, 37, 37))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton)
                    .addComponent(portLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectionStatusLabel)
                .addGap(24, 24, 24)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentValuesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(shortcutsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cvCcLabel)
                            .addComponent(onOffToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(setOutputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Main", mainPanel);

        vProtectionFormatted.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#00.00"))));
        vProtectionFormatted.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        vProtectionFormatted.setText("00,00");
        vProtectionFormatted.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        vProtectionFormatted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vProtectionFormattedActionPerformed(evt);
            }
        });

        vProtectionLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        vProtectionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        vProtectionLabel.setText("V");

        cProtectionFormatted.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));
        cProtectionFormatted.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        cProtectionFormatted.setText("0,000");
        cProtectionFormatted.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cProtectionFormatted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cProtectionFormattedActionPerformed(evt);
            }
        });

        cProtectionLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        cProtectionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cProtectionLabel.setText("A");

        pProtectionFormatted.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#000.0"))));
        pProtectionFormatted.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        pProtectionFormatted.setText("000,0");
        pProtectionFormatted.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        pProtectionFormatted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pProtectionFormattedActionPerformed(evt);
            }
        });

        pProtectionLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        pProtectionLabel.setText("W");

        tProtectionCheckBox.setText("Time protection");
        tProtectionCheckBox.setToolTipText("");
        tProtectionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tProtectionCheckBoxActionPerformed(evt);
            }
        });

        tProtectionFormatted.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance())));
        tProtectionFormatted.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tProtectionFormatted.setText("00:00:00");
        tProtectionFormatted.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        applyProtectionButton.setText("Apply");
        applyProtectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyProtectionButtonActionPerformed(evt);
            }
        });

        setDefaultProtectionButton.setText("Set defaults");

        refreshProtectionButton.setText("Refresh");

        javax.swing.GroupLayout ProtectionSettingsPanelLayout = new javax.swing.GroupLayout(ProtectionSettingsPanel);
        ProtectionSettingsPanel.setLayout(ProtectionSettingsPanelLayout);
        ProtectionSettingsPanelLayout.setHorizontalGroup(
            ProtectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ProtectionSettingsPanelLayout.createSequentialGroup()
                .addContainerGap(104, Short.MAX_VALUE)
                .addGroup(ProtectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ProtectionSettingsPanelLayout.createSequentialGroup()
                        .addComponent(applyProtectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setDefaultProtectionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshProtectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))
                    .addGroup(ProtectionSettingsPanelLayout.createSequentialGroup()
                        .addGroup(ProtectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(pProtectionFormatted)
                            .addComponent(cProtectionFormatted, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(vProtectionFormatted, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ProtectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ProtectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cProtectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(vProtectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pProtectionLabel))
                        .addGap(61, 61, 61)
                        .addGroup(ProtectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tProtectionCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tProtectionFormatted, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(81, 81, 81))
        );
        ProtectionSettingsPanelLayout.setVerticalGroup(
            ProtectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProtectionSettingsPanelLayout.createSequentialGroup()
                .addGroup(ProtectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ProtectionSettingsPanelLayout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(ProtectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(vProtectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(vProtectionFormatted, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ProtectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cProtectionFormatted, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cProtectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ProtectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pProtectionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pProtectionFormatted, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ProtectionSettingsPanelLayout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(tProtectionCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tProtectionFormatted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(ProtectionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applyProtectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setDefaultProtectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshProtectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(78, 78, 78))
        );

        jTabbedPane1.addTab("Protection settings", ProtectionSettingsPanel);

        logTextArea.setEditable(false);
        logTextArea.setColumns(20);
        logTextArea.setLineWrap(true);
        logTextArea.setRows(5);
        logScrollPane.setViewportView(logTextArea);

        javax.swing.GroupLayout logPanelLayout = new javax.swing.GroupLayout(logPanel);
        logPanel.setLayout(logPanelLayout);
        logPanelLayout.setHorizontalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
        );
        logPanelLayout.setVerticalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Log", logPanel);

        jLabel1.setText("Not implemented ...");

        fileSelectionLabel.setText("File:");

        fileSelectionTextField.setEditable(false);
        fileSelectionTextField.setText("No file selected");

        openFileButton.setText("Open");
        openFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileButtonActionPerformed(evt);
            }
        });

        upgradeFirmwareButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        upgradeFirmwareButton.setText("Upgrade");

        downloadFirmwareLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        downloadFirmwareLabel.setForeground(new java.awt.Color(102, 102, 255));
        downloadFirmwareLabel.setText("Download page");
        downloadFirmwareLabel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                downloadFirmwareLabelFocusGained(evt);
            }
        });

        packetLengthLabel.setText("Packet length:");

        packetLengthComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "32", "64", "128", "256", "512", "1024" }));
        packetLengthComboBox.setSelectedIndex(4);

        javax.swing.GroupLayout firmwarePanelLayout = new javax.swing.GroupLayout(firmwarePanel);
        firmwarePanel.setLayout(firmwarePanelLayout);
        firmwarePanelLayout.setHorizontalGroup(
            firmwarePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(firmwarePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(firmwarePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, firmwarePanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(downloadFirmwareLabel))
                    .addGroup(firmwarePanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(fileSelectionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(firmwarePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(firmwarePanelLayout.createSequentialGroup()
                                .addComponent(upgradeFirmwareButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(packetLengthLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(packetLengthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6))
                            .addGroup(firmwarePanelLayout.createSequentialGroup()
                                .addComponent(fileSelectionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(openFileButton)
                        .addGap(0, 29, Short.MAX_VALUE)))
                .addContainerGap())
        );
        firmwarePanelLayout.setVerticalGroup(
            firmwarePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(firmwarePanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(firmwarePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileSelectionLabel)
                    .addComponent(fileSelectionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openFileButton))
                .addGap(18, 18, 18)
                .addGroup(firmwarePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(packetLengthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(packetLengthLabel)
                    .addComponent(upgradeFirmwareButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 242, Short.MAX_VALUE)
                .addGroup(firmwarePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(downloadFirmwareLabel)
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Firmware upgrade", firmwarePanel);

        aboutPane.setEditable(false);
        aboutPane.setBackground(new java.awt.Color(238, 238, 238));
        aboutPane.setBorder(null);
        aboutPane.setContentType("text/html"); // NOI18N
        aboutPane.setText("<p>JDCX is an alternative cross platform and open source for connecting to <b>DC-580</b> and <b>DC-6006L</b> devices (2nd not tested yet).</p>\n");
        jScrollPane1.setViewportView(aboutPane);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("About", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("mainTab");
        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    private void onOffToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onOffToggleButtonActionPerformed
        if (!connected) {
            this.onOffToggleButton.setSelected(false);
            return;
        }
        if (!this.onOffToggleButton.isSelected()) {
            turnOff();
        } else {
            turnOn();
        }       
    }//GEN-LAST:event_onOffToggleButtonActionPerformed

    private void applyOutputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyOutputButtonActionPerformed
        String voltage = this.setVoltageFormatted.getText().replace(",", "").replace(".", "");
        String current = this.setCurrentFormatted.getText().replace(",", "").replace(".", "");
        boolean abort = false;
        
        
        if (Integer.parseInt(voltage) > DCDevice.MAX_VOLTAGE) {
            System.out.println("Invalid voltage");
            this.setVoltageFormatted.setText("00,00");
            abort = true;
        }
        if (Integer.parseInt(current) > DCDevice.MAX_CURRENT) {
            System.out.println("Invalid current");
            this.setCurrentFormatted.setText("0,000");
            abort = true;
        }
        if (!abort) {
            try {
                serialPort.writeString(Command.OUTPUT_VOLTAGE_SET + voltage + "\r\n", ENCODING);
                Thread.sleep(250);
                serialPort.writeString(Command.OUTPUT_CURRENT_SET + current + "\r\n", ENCODING);
            } catch (SerialPortException | UnsupportedEncodingException | InterruptedException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_applyOutputButtonActionPerformed

    private void tProtectionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tProtectionCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tProtectionCheckBoxActionPerformed

    private void applyProtectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyProtectionButtonActionPerformed
        String vProtection = this.vProtectionFormatted.getText().replace(",", "").replace(".", "");
        String cProtection = this.cProtectionFormatted.getText().replace(",", "").replace(".", "");
        String pProtection = this.pProtectionFormatted.getText().replace(",", "").replace(".", "");
        
        String [] timeValues = this.tProtectionFormatted.getText().split(":");
        char enableTime = this.tProtectionCheckBox.isSelected() ? Command.PROTECTION_TIME_ENABLE : Command.PROTECTION_TIME_DISABLE;
        
        try {
            serialPort.writeString(Command.PROTECTION_VOLTAGE_SET + vProtection + "\r\n", ENCODING);
            Thread.sleep(250);
            serialPort.writeString(Command.PROTECTION_CURRENT_SET + cProtection + "\r\n", ENCODING);
            Thread.sleep(250);
            serialPort.writeString(Command.PROTECTION_POWER_SET + pProtection + "\r\n", ENCODING);
            Thread.sleep(250);
            serialPort.writeString(Command.PROTECTION_HOUR_SET + timeValues[0] + "\r\n", ENCODING);
            Thread.sleep(250);
            serialPort.writeString(Command.PROTECTION_MINUTE_SET + timeValues[1] + "\r\n", ENCODING);
            Thread.sleep(250);
            serialPort.writeString(Command.PROTECTION_SECOND_SET + timeValues[2] + "\r\n", ENCODING);
            Thread.sleep(250);
            serialPort.writeString(enableTime + "\r\n", ENCODING);           
        } catch (SerialPortException | UnsupportedEncodingException | InterruptedException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_applyProtectionButtonActionPerformed

    private void currentStateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentStateButtonActionPerformed
        if (connected) {
            try {
                serialPort.writeString(Command.RESET_STATUS + "\r\n", ENCODING);
            } catch (SerialPortException | UnsupportedEncodingException ex) {
                Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_currentStateButtonActionPerformed

    private void setCurrentFormattedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setCurrentFormattedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setCurrentFormattedActionPerformed

    private void setVoltageFormattedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setVoltageFormattedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setVoltageFormattedActionPerformed

    private void vProtectionFormattedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vProtectionFormattedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vProtectionFormattedActionPerformed

    private void pProtectionFormattedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pProtectionFormattedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pProtectionFormattedActionPerformed

    private void cProtectionFormattedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cProtectionFormattedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cProtectionFormattedActionPerformed

    private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_openFileButtonActionPerformed

    private void downloadFirmwareLabelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_downloadFirmwareLabelFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_downloadFirmwareLabelFocusGained

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        try {
            if (!connected) {
                String portName = this.portComboBox.getSelectedItem().toString();
                this.serialPort = new SerialPort(portName);
                serialPort.openPort();
                serialPort.setParams(BAUDRATE, DATABITS, STOP_BITS, PARITY);
                serialPort.addEventListener(this);
                serialPort.writeString(Command.CONNECT + "\r\n", ENCODING);
                Thread.sleep(500);  // should be enough time
                if (connected) {
                    this.connectButton.setText("Disconnect");
                    this.connectionStatusLabel.setText("Connected. Model: " + device.getDevice());
                    this.portComboBox.setEnabled(false);
                } else {
                    System.out.println("not conected");
                    serialPort.closePort();
                    JOptionPane.showMessageDialog(new JFrame(), "Couldn't connect to valid device.", "Connection failed", JOptionPane.ERROR_MESSAGE);

                }                
            } else {
                this.connectButton.setText("Connect");
                serialPort.writeString(Command.DISCONNECT + "\r\n", ENCODING);
                serialPort.closePort();
                connected = false;
                this.connectionStatusLabel.setText("Not connected.");
                this.portComboBox.setEnabled(true);
            }
            //this.connectionStatusLabel.setText("Connected. Device: " + device.getModel());
        } catch (SerialPortException | UnsupportedEncodingException | InterruptedException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_connectButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ProtectionSettingsPanel;
    private javax.swing.JEditorPane aboutPane;
    private javax.swing.JButton applyOutputButton;
    private javax.swing.JButton applyProtectionButton;
    private javax.swing.JFormattedTextField cProtectionFormatted;
    private javax.swing.JLabel cProtectionLabel;
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel connectionStatusLabel;
    private javax.swing.JLabel currentCurrentLabel;
    private javax.swing.JLabel currentPowerLabel;
    private javax.swing.JButton currentStateButton;
    private javax.swing.JLabel currentTemperatureLabel;
    private javax.swing.JPanel currentValuesPanel;
    private javax.swing.JLabel currentVoltageLabel;
    private javax.swing.JLabel cvCcLabel;
    private javax.swing.JLabel downloadFirmwareLabel;
    private javax.swing.JLabel fileSelectionLabel;
    private javax.swing.JTextField fileSelectionTextField;
    private javax.swing.JPanel firmwarePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel logPanel;
    private javax.swing.JScrollPane logScrollPane;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JButton m1Button;
    private javax.swing.JButton m2Button;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JToggleButton onOffToggleButton;
    private javax.swing.JButton openFileButton;
    private javax.swing.JFormattedTextField pProtectionFormatted;
    private javax.swing.JLabel pProtectionLabel;
    private javax.swing.JComboBox<String> packetLengthComboBox;
    private javax.swing.JLabel packetLengthLabel;
    private javax.swing.JComboBox<String> portComboBox;
    private javax.swing.JLabel portLabel;
    private javax.swing.JButton refreshProtectionButton;
    private javax.swing.JFormattedTextField setCurrentFormatted;
    private javax.swing.JLabel setCurrentLabel;
    private javax.swing.JButton setDefaultProtectionButton;
    private javax.swing.JPanel setOutputPanel;
    private javax.swing.JFormattedTextField setVoltageFormatted;
    private javax.swing.JLabel setVoltageLabel;
    private javax.swing.JPanel shortcutsPanel;
    private javax.swing.JCheckBox tProtectionCheckBox;
    private javax.swing.JFormattedTextField tProtectionFormatted;
    private javax.swing.JButton upgradeFirmwareButton;
    private javax.swing.JFormattedTextField vProtectionFormatted;
    private javax.swing.JLabel vProtectionLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void serialEvent(SerialPortEvent event) {
		String response;
        long countA = 0;
		if (event.isRXCHAR()) {
			try {
				Thread.sleep(50);	// wait to getting all together
				response = serialPort.readString();
                System.out.println("Event received: " + response);
				if (response != null) {
					response = response.replace("\n", "").replace("\r", "");
					//this.logTextArea.append("Received: " + response + " - ");
                    if (response.contains(DCDevice.DC_580)) {
                        device = new DCDevice(DCDevice.DC_580);
                        connected = true;
                        this.logTextArea.append("Conection opened to DC_580!\n");
					} else if (response.contains(DCDevice.DC_6006L)) {
                        device = new DCDevice(DCDevice.DC_6006L);
                        connected = true;
                        
						this.logTextArea.append("Conection opened to DC_6006L!\n");
					} else {
						this.logTextArea.append("Unknown Device\n");
					}
                    if (response.contains("A")) {
                        response = response.replace(DCDevice.DC_580, "");
                        response = response.replace(DCDevice.DC_6006L, "");
                        device.translateDCInfo(response);
                        countA = response.chars().filter(c -> c == 'A').count();
                        // Now update fields...
                        updateFields();
                        // if string has more than 7 As some value has changed
                        if (countA > 7) {
                            updateChanges();
                        }
                    }
				}
			} catch (SerialPortException | InterruptedException e) {
				e.printStackTrace();
			}
        }
    }
    
    private void updateFields() {
        String currV = String.format("%05.2f", (float) device.getVoltage() / 100.0f) + " V";
        String currI = String.format("%05.3f", (float) device.getCurrent() / 1000.0f) + " A";
        String currP = String.format("%05.2f", (float) device.getPower() / 100.0f) + " W";
        String currT = String.format("%03d", device.getTemperature()) + " " + device.getTempUnits();
        
        this.currentVoltageLabel.setText(currV);
        this.currentCurrentLabel.setText(currI);
        this.currentPowerLabel.setText(currP);
        this.currentTemperatureLabel.setText(currT);
        this.cvCcLabel.setText(device.getCvCc());
        //this.onOffToggleButton.setText(device.getOnOff());
        this.currentStateButton.setText(device.getFault());
        
        if (!device.getFault().equals("OK")) {
            turnOff();
        }
    }
    
    public void updateChanges() {
        String vSet = String.format("%05.2f", (float) device.getVoltageSet() / 100.0f);
        String cSet = String.format("%05.3f", (float) device.getCurrentSet() / 1000.0f);
        String vProt = String.format("%05.2f", (float) device.getvProtection() / 100.0f);
        String cProt = String.format("%05.3f", (float) device.getcProtection() / 1000.0f);
        String pProt = String.format("%05.1f", (float) device.getpProtection() / 10.0f);
        String tHour = String.format("%02d", device.getTHourProtection());
        String tMinute = String.format("%02d", device.getTMinuteProtection());
        String tSecond = String.format("%02d", device.getTSecondProtection());
        
        this.setVoltageFormatted.setText(vSet);
        this.setCurrentFormatted.setText(cSet);
        this.vProtectionFormatted.setText(vProt);
        this.cProtectionFormatted.setText(cProt);
        this.pProtectionFormatted.setText(pProt);
        this.tProtectionCheckBox.setSelected(device.getCheckedTimeProtection() > 0);
        this.tProtectionFormatted.setText(tHour + ":" + tMinute + ":" + tSecond);
    }
    
    private void turnOff() {
        this.onOffToggleButton.setSelected(false);
        this.onOffToggleButton.setText("OFF");
        device.setOnOff(0);
        try {
            serialPort.writeString("F\r\n", ENCODING);
        } catch (SerialPortException | UnsupportedEncodingException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void turnOn() {
        this.onOffToggleButton.setSelected(true);
        this.onOffToggleButton.setText("ON");
        device.setOnOff(1);
        try {
            serialPort.writeString("N\r\n", ENCODING);
        } catch (SerialPortException | UnsupportedEncodingException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
